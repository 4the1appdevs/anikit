// Generated by LiveScript 1.3.1
(function(){
  var easingFit, cubic, anikit, ret;
  if (typeof require != 'undefined' && require !== null) {
    easingFit = require('easing-fit');
    cubic = require('cubic');
    anikit = require('../anikit');
  }
  ret = {
    name: 'patrol',
    type: 'animation',
    preset: {
      breath: {
        offset: {
          'default': 0.06,
          min: 0.01,
          max: 1,
          step: 0.01,
          name: "Scale Amount"
        },
        prop: function(f, c){
          return {
            transform: "scale(" + (1 + f.value * c.offset - 0.03) + ")"
          };
        },
        value: function(t, c){
          return {
            transform: anikit.util.s(1 + t * c.offset - 0.03)
          };
        }
      },
      dim: {
        offset: {
          'default': 0.5,
          min: 0,
          max: 1,
          step: 0.01,
          name: "Dim Amount"
        },
        prop: function(f, c){
          return {
            opacity: 0.5 + f.value * c.offset
          };
        },
        value: function(t, c){
          return {
            opacity: 0.5 + t * c.offset
          };
        }
      },
      metronome: {
        offset: {
          'default': 10,
          min: 0,
          max: 90,
          step: 1,
          name: "Shaking Amount"
        },
        local: {
          errorThreshold: 0.001,
          sampleCount: 20,
          segSampleCount: 1000
        },
        prop: function(f, c){
          return {
            transform: "translate(" + f.value * c.offset + c.unit + ") rotate(" + f.value * c.offset * 2 + "deg)"
          };
        },
        value: function(t, c){
          var a;
          a = t * c.offset * 2 * Math.PI / 180;
          return {
            transform: [Math.cos(a), Math.sin(a), 0, t * c.offset, -Math.sin(a), Math.cos(a), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
          };
        }
      },
      swing: {
        offset: {
          'default': 30,
          unit: 'deg',
          min: 0,
          max: 90,
          step: 1,
          name: "Rotate Amount"
        },
        prop: function(f, c){
          return {
            transform: "rotate(" + f.value * c.offset + "deg)"
          };
        },
        value: function(t, c){
          return {
            transform: anikit.util.rz(t * c.offset * Math.PI / 180)
          };
        }
      },
      "wander-v": {
        label: "wander (vertically)",
        offset: {
          'default': 10,
          max: 500,
          step: 1,
          name: "Move Amount"
        },
        local: {
          errorThreshold: 0.0001,
          sampleCount: 20,
          segSampleCount: 1000
        },
        unit: 'px',
        prop: function(f, c){
          return {
            transform: "translate(0," + f.value * c.offset + c.unit + ")"
          };
        },
        value: function(t, c){
          return {
            transform: anikit.util.ty(t * c.offset)
          };
        }
      },
      "wander-h": {
        label: "wander (horizontally)",
        offset: {
          'default': 10,
          max: 500,
          step: 1,
          name: "Move Amount"
        },
        local: {
          errorThreshold: 0.0001,
          sampleCount: 20,
          segSampleCount: 1000
        },
        unit: 'px',
        prop: function(f, c){
          return {
            transform: "translate(" + f.value * c.offset + c.unit + ",0)"
          };
        },
        value: function(t, c){
          return {
            transform: anikit.util.tx(t * c.offset)
          };
        }
      }
    },
    edit: {
      steep: {
        'default': 0.6,
        type: 'number',
        min: 0.34,
        max: 1,
        step: 0.01
      },
      offset: {
        'default': 10,
        type: 'number',
        unit: 'px',
        min: 0,
        max: 100,
        step: 0.01
      },
      unit: {
        'default': 'px',
        type: 'choice',
        values: ["px", "%", ""]
      }
    },
    timing: function(t, opt){
      var p;
      p = [opt.steep, 0, 1 - opt.steep, 1];
      if (t < 0.5) {
        t = cubic.Bezier.y(cubic.Bezier.t(t * 2, p), p) / 2;
      } else {
        t = cubic.Bezier.y(cubic.Bezier.t((t - 0.5) * 2, p), p) / 2 + 0.5;
      }
      t = 1 - 4 * Math.abs(t - 0.5);
      return t;
    },
    css: function(opt){
      var ref$, ref1$, this$ = this;
      return easingFit.fitToKeyframes(function(it){
        return this$.timing(it, opt);
      }, (ref$ = (ref1$ = import$({}, opt.local) || {}, ref1$.config = opt, ref1$), ref$.name = opt.name, ref$.prop = opt.prop, ref$));
    },
    js: function(t, opt){
      return opt.prop({
        value: this.timing(t, opt)
      }, opt);
    },
    affine: function(t, opt){
      return opt.value(this.timing(t, opt), opt);
    }
  };
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ret;
  }
  return ret;
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}