// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ret;
  ret = {
    name: 'rush',
    type: 'animation',
    preset: {
      "rush-ltr": {
        dir: 1,
        repeat: 0
      },
      "rush-rtl": {
        dir: 2,
        repeat: 0
      },
      "rush-ttb": {
        dir: 3,
        repeat: 0
      },
      "rush-btt": {
        dir: 4,
        repeat: 0
      },
      "rush-ltr-in": {
        dir: 1,
        repeat: 1
      },
      "rush-rtl-in": {
        dir: 2,
        repeat: 1
      },
      "rush-ttb-in": {
        dir: 3,
        repeat: 1
      },
      "rush-btt-in": {
        dir: 4,
        repeat: 1
      }
    },
    edit: {
      dir: {
        name: "Direction",
        type: 'Choice',
        values: [1, 2, 3, 4],
        'default': 1
      },
      offset: {
        name: "Offset",
        'default': 60,
        type: 'number',
        min: 0,
        max: 1000
      },
      size: {
        name: "Item Size",
        'default': 32,
        type: 'number',
        min: 0,
        max: 1000
      },
      deg: {
        name: "Skew",
        'default': 30,
        type: 'number',
        unit: 'deg',
        min: 0,
        max: 90
      },
      flip: {
        name: "Flip",
        'default': false,
        type: 'boolean'
      },
      unit: {
        'default': 'px',
        type: 'choice',
        values: ["px", "%", ""]
      }
    },
    local: {
      data: function(opt){
        var RD, deg, offset, size, ds, xs, ts, dc, sgn, flip;
        RD = Math.PI / 180;
        deg = opt.deg, offset = opt.offset, size = opt.size;
        ds = [deg, -deg / 2, -deg / 2, deg / 4, -deg / 8, 0, 0, deg];
        xs = [-offset - size * Math.tan(deg * RD), -offset / 10 - size * Math.tan(RD * -deg / 2), -size * Math.tan(RD * -deg / 2), -size * Math.tan(RD * deg / 4), -size * Math.tan(RD * -deg / 8), 0, 0, offset];
        if (opt.repeat) {
          ts = [0, 0.3, 0.4, 0.55, 0.7, 0.8, 1];
        } else {
          ts = [0, 0.25, 0.33, 0.44, 0.55, 0.66, 0.8, 1];
        }
        dc = opt.dir <= 2 ? 'X' : 'Y';
        sgn = opt.dir % 2
          ? 1
          : -1;
        flip = opt.flip ? -1 : 1;
        return {
          RD: RD,
          deg: deg,
          offset: offset,
          size: size,
          ds: ds,
          xs: xs,
          ts: ts,
          dc: dc,
          sgn: sgn,
          flip: flip
        };
      }
    },
    css: function(opt){
      var ref$, RD, deg, offset, size, ds, xs, ts, dc, sgn, flip, fs, i$, to$, i;
      ref$ = this.local.data(opt), RD = ref$.RD, deg = ref$.deg, offset = ref$.offset, size = ref$.size, ds = ref$.ds, xs = ref$.xs, ts = ref$.ts, dc = ref$.dc, sgn = ref$.sgn, flip = ref$.flip;
      fs = "";
      for (i$ = 0, to$ = ts.length; i$ < to$; ++i$) {
        i = i$;
        fs += ts[i] * 100 + "% { transform: translate" + dc + "(" + sgn * xs[i] + opt.unit + ") skew" + dc + "(" + flip * sgn * ds[i] + "deg); }\n";
      }
      return "@keyframes " + opt.name + " {\n  0% { animation-timing-function: cubic-bezier(0,0.5,0.5,1); opacity: 0 }\n  5% { opacity: 1}\n  " + fs + "\n  100% { opacity: 1}\n}";
    },
    js: function(t, opt){
      var ref$, RD, deg, offset, size, ds, xs, ts, dc, sgn, flip, i$, to$, i, d1, d2, x1, x2, t1, t2, x, d;
      ref$ = this.local.data(opt), RD = ref$.RD, deg = ref$.deg, offset = ref$.offset, size = ref$.size, ds = ref$.ds, xs = ref$.xs, ts = ref$.ts, dc = ref$.dc, sgn = ref$.sgn, flip = ref$.flip;
      for (i$ = 0, to$ = ts.length; i$ < to$; ++i$) {
        i = i$;
        if (t < ts[i]) {
          break;
        }
      }
      ref$ = slice$.call(ds, i - 1, i + 1 || 9e9), d1 = ref$[0], d2 = ref$[1];
      ref$ = slice$.call(xs, i - 1, i + 1 || 9e9), x1 = ref$[0], x2 = ref$[1];
      ref$ = slice$.call(ts, i - 1, i + 1 || 9e9), t1 = ref$[0], t2 = ref$[1];
      if (i === 1) {
        t = Math.pow(t / ts[1], 0.5) * ts[1];
      }
      x = x1 + (x2 - x1) * (t - t1) / (t2 - t1);
      d = d1 + (d2 - d1) * (t - t1) / (t2 - t1);
      return {
        transform: "translate" + dc + "(" + sgn * x + opt.unit + ") skew" + dc + "(" + flip * sgn * d + "deg)",
        opacity: (ref$ = t * 20) < 1 ? ref$ : 1
      };
    },
    affine: function(t, opt){
      var ref$, RD, deg, offset, size, ds, xs, ts, dc, sgn, flip, i$, to$, i, d1, d2, x1, x2, t1, t2, x, d, kx, ky, tx, ty;
      ref$ = this.local.data(opt), RD = ref$.RD, deg = ref$.deg, offset = ref$.offset, size = ref$.size, ds = ref$.ds, xs = ref$.xs, ts = ref$.ts, dc = ref$.dc, sgn = ref$.sgn, flip = ref$.flip;
      for (i$ = 0, to$ = ts.length; i$ < to$; ++i$) {
        i = i$;
        if (t < ts[i]) {
          break;
        }
      }
      ref$ = slice$.call(ds, i - 1, i + 1 || 9e9), d1 = ref$[0], d2 = ref$[1];
      ref$ = slice$.call(xs, i - 1, i + 1 || 9e9), x1 = ref$[0], x2 = ref$[1];
      ref$ = slice$.call(ts, i - 1, i + 1 || 9e9), t1 = ref$[0], t2 = ref$[1];
      if (i === 1) {
        t = Math.pow(t / ts[1], 0.5) * ts[1];
      }
      x = x1 + (x2 - x1) * (t - t1) / (t2 - t1);
      d = d1 + (d2 - d1) * (t - t1) / (t2 - t1);
      kx = dc === 'X' ? -Math.tan(flip * sgn * d * Math.PI / 180) : 0;
      ky = dc === 'Y' ? -Math.tan(flip * sgn * d * Math.PI / 180) : 0;
      tx = dc === 'X' ? sgn * x : 0;
      ty = dc === 'Y' ? -sgn * x : 0;
      return {
        transform: [1, kx, 0, tx, ky, 1, 0, ty, 0, 0, 1, 0, 0, 0, 0, 1],
        opacity: (ref$ = t * 20) < 1 ? ref$ : 1
      };
    }
  };
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ret;
  }
  return ret;
})();