// Generated by LiveScript 1.3.1
(function(){
  var easingFit, cubic, anikit, ret;
  if (typeof require != 'undefined' && require !== null) {
    easingFit = require('easing-fit');
    cubic = require('cubic');
    anikit = require('../anikit');
  }
  ret = {
    name: 'squeeze',
    type: 'animation',
    preset: {
      squeeze: {
        local: {
          sampleCount: 20,
          errorThreshold: 0.001
        },
        prop: function(f, c){
          var sx, sy;
          sx = 1 - 2 * Math.abs(0.5 - f.value) * c.zoomx;
          sy = 1 - 2 * (0.5 - Math.abs(0.5 - f.value)) * c.zoomy;
          return {
            transform: "scale(" + sx + "," + sy + ")"
          };
        },
        value: function(t, c){
          var sx, sy;
          sx = 1 - 2 * Math.abs(0.5 - t) * c.zoomx;
          sy = 1 - 2 * (0.5 - Math.abs(0.5 - t)) * c.zoomy;
          return {
            transform: [sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
          };
        }
      }
    },
    edit: {
      steep: {
        'default': 0.5,
        type: 'number',
        min: 0,
        max: 1,
        step: 0.01
      },
      zoomx: {
        name: "X Scale",
        'default': 0.5,
        type: 'number',
        min: 0,
        max: 1,
        step: 0.01
      },
      zoomy: {
        name: "Y Scale",
        'default': 0.5,
        type: 'number',
        min: 0,
        max: 1,
        step: 0.01
      }
    },
    timing: function(t, opt){
      var p1, d;
      p1 = [0, opt.steep, 1 - opt.steep, 1];
      d = (t - Math.floor(t * 2) * 0.5) * 2;
      d = cubic.Bezier.y(cubic.Bezier.t(d, p1), p1) * 0.5;
      d = d + Math.floor(t * 2) * 0.5;
      return d;
    },
    css: function(opt){
      var ref$, ref1$, this$ = this;
      return easingFit.fitToKeyframes(function(it){
        return this$.timing(it, opt);
      }, (ref$ = (ref1$ = import$({}, opt.local) || {}, ref1$.config = opt, ref1$), ref$.name = opt.name, ref$.prop = opt.prop, ref$));
    },
    js: function(t, opt){
      return opt.prop({
        value: this.timing(t, opt)
      }, opt);
    },
    affine: function(t, opt){
      return opt.value(this.timing(t, opt), opt);
    }
  };
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ret;
  }
  return ret;
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}