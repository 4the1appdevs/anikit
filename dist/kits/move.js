// Generated by LiveScript 1.3.1
(function(){
  var easingFit, cubic, anikit, move, ret;
  if (typeof require != 'undefined' && require !== null) {
    easingFit = require('easing-fit');
    cubic = require('cubic');
    anikit = require('../anikit');
  }
  move = {
    prop: function(f, c){
      var value;
      value = this.value(f.value, c);
      return {
        transform: "matrix(" + anikit.util.m4to3(value.transform).join(',') + ")"
      };
    },
    value: function(t, c){
      return {
        transform: anikit.util[c.dir % 2 ? 'tx' : 'ty']((c.dir > 2 ? -1 : 1) * 2 * (t - 0.5) * c.offset)
      };
    }
  };
  ret = {
    name: 'move',
    type: 'animation',
    preset: {
      "move-ltr": import$({
        offset: 100,
        dir: 1
      }, move),
      "move-rtl": import$({
        offset: 100,
        dir: 3
      }, move),
      "move-ttb": import$({
        offset: 100,
        dir: 2
      }, move),
      "move-btt": import$({
        offset: 100,
        dir: 4
      }, move)
    },
    edit: {
      steep: {
        'default': 0.3,
        type: 'number',
        min: 0.3,
        max: 1,
        step: 0.01
      },
      offset: {
        name: "Move Distance",
        'default': 100,
        type: 'number',
        unit: 'px',
        min: 0,
        max: 1000
      },
      dir: {
        'default': 1,
        type: 'number',
        hidden: true
      },
      unit: {
        'default': 'px',
        type: 'choice',
        values: ["px", "%", ""]
      },
      fade: {
        type: 'boolean',
        'default': false
      }
    },
    timing: function(t, opt){
      return ((2 * t + 1) % 2 - 1) * 0.5 + 0.5;
    },
    css: function(opt){
      return easingFit.toKeyframes([
        {
          percent: 0,
          value: 0
        }, {
          percent: 100,
          value: 1
        }
      ], {
        name: opt.name,
        prop: function(f, c){
          var ref$, a, b;
          ref$ = [0, f.value * c.offset * (opt.dir > 2 ? -1 : 1)], a = ref$[0], b = ref$[1];
          if (c.dir % 2) {
            ref$ = [b, a], a = ref$[0], b = ref$[1];
          }
          return {
            transform: "matrix(1,0,0,1," + a + "," + b + ")"
          };
        },
        config: opt
      });
    },
    js: function(t, opt){
      return opt.prop({
        value: t
      }, opt);
    },
    affine: function(t, opt){
      return opt.value(t, opt);
    }
  };
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ret;
  }
  return ret;
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}