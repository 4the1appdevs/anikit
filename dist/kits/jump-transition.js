// Generated by LiveScript 1.3.1
var easingFit, cubic, anikit, easing, ret;
easingFit = require('easing-fit');
cubic = require('cubic');
anikit = require('../anikit');
easing = require('../easing');
ret = {
  name: 'jump-transition',
  type: 'animation',
  preset: {
    "jump-alt-in": {
      dir: 1,
      count: 9,
      dtime: 0.85,
      decay: 0.5,
      local: {
        sampleCount: 40,
        errorThreshold: 0.0001,
        segSampleCount: 1000
      }
    },
    "jump-alt-out": {
      dir: -1,
      count: 9,
      dtime: 0.85,
      decay: 0.5,
      local: {
        sampleCount: 40,
        errorThreshold: 0.0001,
        segSampleCount: 1000
      }
    },
    "jump-in": {
      dir: 1,
      count: 3,
      local: {
        sampleCount: 20,
        errorThreshold: 0.0001,
        segSampleCount: 1000
      }
    },
    "jump-out": {
      dir: -1,
      count: 3,
      local: {
        sampleCount: 40,
        errorThreshold: 0.0001,
        segSampleCount: 1000
      }
    },
    "zoom-in": {
      dir: 1,
      count: 1,
      power: 0.25,
      local: {
        sampleCount: 40,
        errorThreshold: 0.01,
        segSampleCount: 100
      }
    },
    "zoom-out": {
      dir: -1,
      count: 1,
      power: 0.25,
      local: {
        sampleCount: 40,
        errorThreshold: 0.01,
        segSampleCount: 100
      }
    }
  },
  edit: {
    dir: {
      type: 'number',
      'default': 1,
      hidden: true
    },
    count: {
      type: 'number',
      'default': 5,
      min: 1,
      max: 30,
      step: 2
    },
    dtime: {
      type: 'number',
      'default': 0.7,
      min: 0,
      max: 1,
      step: 0.01
    },
    decay: {
      type: 'number',
      'default': 0.4,
      min: 0,
      max: 1,
      step: 0.01
    },
    power: {
      type: 'number',
      'default': 2,
      min: 0,
      max: 10,
      step: 0.01,
      hidden: true
    }
  },
  local: {
    prop: function(f, c){
      var value;
      value = this.value(f.value, c);
      return {
        transform: "matrix(" + anikit.util.m4to3(value.transform).join(',') + ")"
      };
    },
    value: function(t, c){
      if (c.dir > 0) {
        t = 1 - t;
      }
      if (t <= 0.01) {
        t = 0.01;
      }
      return {
        transform: [t, 0, 0, 0, 0, t, 0, 0, 0, 0, t, 0, 0, 0, 0, 1]
      };
    }
  },
  timing: function(t, opt){
    var pt, et, i$, to$, i, oet, delta, x;
    pt = 1 / (2 * ((Math.pow(opt.dtime, opt.count) - 1) / (opt.dtime - 1) - 0.5));
    et = 0;
    t = t + pt;
    for (i$ = 0, to$ = opt.count; i$ < to$; ++i$) {
      i = i$;
      oet = et;
      delta = pt * Math.pow(opt.dtime, i);
      et = et + 2 * delta;
      if (t <= et) {
        x = (1 - Math.pow((t - oet) - delta, opt.power) / Math.pow(delta, opt.power)) * Math.pow(opt.decay, i);
        return x;
      }
    }
    return 0;
  },
  css: function(opt){
    var prop, ret, ref$, ref1$, ref2$, this$ = this;
    prop = function(f, c){
      return this$.local.prop(f, c);
    };
    ret = easingFit.fitToKeyframes(function(it){
      return this$.timing(it, opt);
    }, (ref$ = (ref1$ = (ref2$ = import$({}, opt.local) || {}, ref2$.config = opt, ref2$), ref1$.name = opt.name, ref1$), ref$.prop = prop, ref$));
    console.log(ret);
    return ret;
  },
  js: function(t, opt){
    var value;
    value = this.local.value(this.timing(t, opt), opt);
    return {
      transform: "matrix(" + anikit.util.m4to3(value.transform).join(',') + ")"
    };
  },
  affine: function(t, opt){
    return this.local.value(this.timing(t, opt), opt);
  }
};
module.exports = ret;
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}