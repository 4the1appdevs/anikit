// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
// Generated by LiveScript 1.3.1
var slice$ = [].slice;
(function(){
  var ldAnikitPickerExt;
  ldAnikitPickerExt = function(opt){
    var html, this$ = this;
    opt == null && (opt = {});
    this.opt = opt;
    this.root = typeof opt.root === 'string'
      ? document.querySelector(opt.root)
      : opt.root;
    this.btn = ld$.find(this.root, '.dropdown-toggle', 0);
    this.active = null;
    this.anikit = null;
    this.evtHandler = {};
    this.applyFilters();
    ld$.find(this.root, '.anikits').map(function(d, i){
      if (d.childNodes.length === 0) {
        return ld$.remove(d);
      }
    });
    ld$.find(this.root, '.head').map(function(d, i){
      if (!d.nextSibling || d.nextSibling.classList.contains('dropdown-divider')) {
        ld$.remove(d.nextSibling);
        return ld$.remove(d);
      }
    });
    html = function(name, type){
      var demo;
      type == null && (type = 'modal');
      demo = "<div class=\"demo\"><div class=\"inner\"><div class=\"ld ld-" + name + "\"></div></div></div>\n<span>" + name + "</span>";
      return type === 'modal'
        ? "<div class=\"anikit\" data-anikit=\"" + name + "\" data-ldcv-set=k>" + demo + "</div>"
        : "<a href=\"#\" class=\"dropdown-item anikit\" data-anikit=\"" + name + "\">" + demo + "</a>";
    };
    return ld$.find(this.root, '.inner', 0).addEventListener('click', function(e){
      var tgt, n, kit;
      tgt = e.target;
      n = ld$.parent(tgt, '.disabled', this$.root);
      if (n) {
        return e.stopPropagation();
      }
      n = ld$.parent(tgt, '[data-anikit]', this$.root);
      if (!n) {
        return e.stopPropagation();
      }
      kit = n.getAttribute('data-anikit');
      if (!kit) {
        return e.stopPropagation();
      }
      if (this$.active) {
        this$.active.classList.remove('active');
      }
      n.classList.add('active');
      if (kit !== this$.anikit) {
        this$.fire('choose', kit, {
          limited: !!ld$.parent(tgt, '.limited', this$.root)
        });
      }
      this$.anikit = kit;
      this$.active = n;
      if (this$.btn) {
        return this$.btn.innerText = this$.anikit;
      }
    });
  };
  ldAnikitPickerExt.prototype = import$(Object.create(Object.prototype), {
    on: function(n, cb){
      var ref$;
      return ((ref$ = this.evtHandler)[n] || (ref$[n] = [])).push(cb);
    },
    fire: function(n){
      var v, i$, ref$, len$, cb, results$ = [];
      v = slice$.call(arguments, 1);
      for (i$ = 0, len$ = (ref$ = this.evtHandler[n] || []).length; i$ < len$; ++i$) {
        cb = ref$[i$];
        results$.push(cb.apply(this, v));
      }
      return results$;
    },
    applyFilters: function(o){
      var this$ = this;
      if (o != null) {
        ['disableFilter', 'defaultFilter'].map(function(it){
          if (o[it]) {
            return this$.opt[it] = o[it];
          }
        });
      }
      return ld$.find(this.root, '.anikit').map(function(d, i){
        var ret;
        if (this$.opt.disableFilter) {
          ret = this$.opt.disableFilter(d.getAttribute('data-anikit'), i);
          ld$.cls(d, this$.opt.limitHard
            ? {
              disabled: ret
            }
            : {
              limited: ret
            });
        }
        if (this$.opt.defaultFilter && !this$.opt.defaultFilter(d.getAttribute('data-anikit'), i)) {
          return ld$.remove(d);
        }
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    return window.ldAnikitPickerExt = ldAnikitPickerExt;
  }
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
