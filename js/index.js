// Generated by LiveScript 1.3.1
(function(){
  var ldrsNodes, ldrs1, ldrs2, ldrs1Demo, kit, ldap, ldapNodes, threeInit, threeRoot, ref$, camera, scene, renderer, w, h, controls, d, shape, geom, mat, mesh, group, light;
  ld$.find(document, '#presets .item').map(function(n){
    return n.addEventListener('click', function(){
      var a, s;
      a = n.getAttribute('data-name');
      s = ld$.find(n, '.square', 0);
      s.classList.remove(a);
      s.offsetHeight;
      return setTimeout(function(){
        return s.classList.add(a);
      }, 0);
    });
  });
  ldrsNodes = ld$.find(document, '.ldrs');
  window.ldcv1 = new ldCover({
    root: ld$.find(document, '#kit-modal-1 .ldcv', 0)
  });
  window.ldcv2 = new ldCover({
    root: ld$.find(document, '#kit-modal-2 .ldcv', 0)
  });
  window.ldcv3 = new ldCover({
    root: ld$.find(document, '#kit-modal-3 .ldcv', 0)
  });
  ldrs1 = new ldSlider({
    root: ldrsNodes[0],
    min: 0,
    max: 1,
    step: 0.01
  });
  ldrs2 = new ldSlider({
    root: ldrsNodes[1],
    min: 0,
    max: 1,
    step: 0.01
  });
  ldrs1Demo = ld$.find(document, '#ldrs-demo', 0);
  kit = new anikit('bounce');
  ldrs1.on('change', function(it){
    return kit.animateJs(ldrs1Demo, it);
  });
  window.ldap = ldap = new ldAnikitPicker({
    root: '.ldap'
  });
  ldapNodes = ld$.find(document, '#ldap-animate i');
  window.ldapAnimate = function(node){
    return ldap.get({
      host: node
    }).then(function(o){
      var n, k;
      if (!o) {
        return;
      }
      n = o.name;
      k = new anikit(n.replace(/^ld-/, ''));
      return ldapNodes.map(function(d, i){
        var delay;
        delay = i / ldapNodes.length;
        if (!k.config.repeat) {
          delay = -1 + delay;
        }
        k.animateJs(d, 0);
        k.animate(d);
        return d.style.animationDelay = delay + "s";
      });
    });
  };
  threeInit = function(root){
    var box, ref$, w, h, camera, scene, renderer, controls, animate;
    box = root.getBoundingClientRect();
    ref$ = [box.width, box.height], w = ref$[0], h = ref$[1];
    camera = new THREE.PerspectiveCamera(45, w / h, 1, 10000);
    scene = new THREE.Scene();
    renderer = new THREE.WebGLRenderer({
      antialias: true,
      alpha: true
    });
    renderer.setSize(w, h);
    renderer.setClearColor(0x0, 0);
    root.appendChild(renderer.domElement);
    controls = {};
    animate = function(renderFunc){
      var _animate;
      _animate = function(value){
        requestAnimationFrame(_animate);
        return renderFunc(value);
      };
      return _animate();
    };
    return {
      camera: camera,
      scene: scene,
      renderer: renderer,
      w: w,
      h: h,
      controls: controls
    };
  };
  threeRoot = ld$.find(document, '#three-root', 0);
  ref$ = threeInit(threeRoot), camera = ref$.camera, scene = ref$.scene, renderer = ref$.renderer, w = ref$.w, h = ref$.h, controls = ref$.controls;
  d = 1.1;
  shape = new THREE.Shape();
  shape.moveTo(d, 0);
  shape.bezierCurveTo(d, 1.3 * d, -d, 1.3 * d, -d, 0);
  shape.bezierCurveTo(-d, -1.3 * d, d, -1.3 * d, d, 0);
  geom = geom = new THREE.ShapeGeometry(shape);
  mat = mat = new THREE.MeshStandardMaterial({
    color: 0xffffff,
    metalness: 0,
    roughness: 0.5
  });
  mat = mat = new THREE.ShaderMaterial({
    side: THREE.DoubleSide,
    transparent: true,
    uniforms: {
      alpha: {
        type: 'f',
        value: 1
      }
    },
    vertexShader: 'varying vec2 vUv;\nvarying float vA;\nuniform float alpha;\nvoid main() {\n  vUv = uv;\n  vA = alpha;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n}',
    fragmentShader: 'varying vec2 vUv;\nvarying float vA;\nvoid main() {\n  vec3 c1 = vec3(.3, .5, 0.9);\n  vec3 c2 = vec3(.6, .8, 1.);\n  vec2 v = vUv;\n  float len = 0.;\n  len = length(v - 0.);\n  len = smoothstep(0.88,0.89,len);\n  if(v.y + v.x < 0.0 || v.y - v.x < 0.0 ) { len = 0.; }\n  gl_FragColor = vec4(mix(c1, c2, len), vA);\n}'
  });
  mesh = mesh = new THREE.Mesh(geom, mat);
  group = group = new THREE.Group();
  group.add(mesh);
  scene.add(group);
  light = new THREE.HemisphereLight(0x0099ff, 0xff9900, 0.9);
  scene.add(light);
  camera.position.set(0, 0, 10);
  camera.lookAt(0, 0, 0);
  renderer.render(scene, camera);
  return ldrs2.on('change', function(it){
    kit.animateThree(mesh, it);
    return renderer.render(scene, camera);
  });
})();