// Generated by LiveScript 1.3.1
var easingFit, cubic, kitsList, easing, uuid, ref$, cos, sin, anikit;
easingFit = require('easing-fit');
cubic = require('cubic');
kitsList = require('./kits-list');
easing = require('./easing');
uuid = require('uuid/v4');
ref$ = {
  cos: Math.cos,
  sin: Math.sin
}, cos = ref$.cos, sin = ref$.sin;
anikit = function(name, opt){
  var ref$;
  opt == null && (opt = {});
  ref$ = anikit.get(name, opt), this.mod = ref$.mod, this.config = ref$.config;
  ref$ = [null, uuid()], this.dom = ref$[0], this.id = ref$[1];
  this.setConfig(this.config);
  return this;
};
anikit.prototype = import$(Object.create(Object.prototype), {
  setConfig: function(c){
    var ref$;
    c == null && (c = {});
    import$(this.config, c);
    if (this.dom) {
      this.dom.textContent = this.mod.css((ref$ = import$({}, this.config), ref$.name = this.config.name + "-" + this.id, ref$));
    }
    return this.mod.config = this.config;
  },
  css: function(opt){
    opt == null && (opt = {});
    if (this.mod.css) {
      return this.mod.css(import$(import$({}, this.config), opt));
    } else {
      return {};
    }
  },
  js: function(t, opt){
    opt == null && (opt = this.config);
    if (this.mod.js) {
      return this.mod.js(t, opt);
    } else {
      return {};
    }
  },
  affine: function(t, opt){
    opt == null && (opt = this.config);
    if (this.mod.affine) {
      return this.mod.affine(t, opt);
    } else {
      return {};
    }
  },
  animate: function(node, opt){
    opt == null && (opt = {});
    opt = import$(import$({}, this.config), opt);
    if (!this.dom) {
      document.body.appendChild(this.dom = document.createElement('style'));
      this.setConfig();
    }
    node.style.animation = this.config.name + "-" + this.id + " " + (opt.dur || 1) + "s " + (opt.repeatCount || 'infinite') + " linear";
    return node.style.animationDelay = (opt.delay || 0) + "s";
  },
  statify: function(node){
    return node.style.animation = node.style.animationDelay = "";
  },
  destroy: function(){
    return this.dom.parentNode.removechild(this.dom);
  }
});
import$(anikit, {
  util: {
    noise: function(t){
      return (Math.sin(t * 43758.5453) + 1) * 0.5;
    },
    rx: function(t){
      return [1, 0, 0, 0, 0, cos(t), -sin(t), 0, 0, sin(t), cos(t), 0, 0, 0, 0, 1];
    },
    ry: function(t){
      return [cos(t), 0, sin(t), 0, 0, 1, 0, 0, -sin(t), 0, cos(t), 0, 0, 0, 0, 1];
    },
    rz: function(t){
      return [cos(t), sin(t), 0, 0, -sin(t), cos(t), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    },
    tx: function(t){
      return [1, 0, 0, t, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    },
    ty: function(t){
      return [1, 0, 0, 0, 0, 1, 0, t, 0, 0, 1, 0, 0, 0, 0, 1];
    },
    tz: function(t){
      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, t, 0, 0, 0, 1];
    },
    sx: function(t){
      return [t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    },
    sy: function(t){
      return [1, 0, 0, 0, 0, t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    },
    sz: function(t){
      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, t, 0, 0, 0, 0, 1];
    }
  },
  get: function(name, opt){
    var mod, config, k, ref$, v;
    opt == null && (opt = {});
    mod = this.types[name]
      ? this.mods[this.types[name]]
      : this.mods[name];
    config = {
      name: name,
      dur: 1
    };
    for (k in ref$ = mod.edit) {
      v = ref$[k];
      config[k] = v['default'];
    }
    /* default / preset / overwrite */
    import$(import$(config, mod.preset[name]), opt);
    return {
      mod: mod,
      config: config
    };
  }
  /* all available mods */,
  mods: kitsList.mods
  /* all available animations, base on mods */,
  types: kitsList.types
});
if (typeof window != 'undefined' && window !== null) {
  window.easing = easing;
  window.anikit = anikit;
  window.easingFit = easingFit;
  window.cubic = cubic;
}
if (typeof module != 'undefined' && module !== null) {
  module.exports = anikit;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}