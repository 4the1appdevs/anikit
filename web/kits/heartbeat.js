// Generated by LiveScript 1.3.1
var ret;
ret = {
  name: 'heartbeat',
  type: 'animation',
  preset: {
    heartbeat: {
      prop: function(f, c){
        return {
          transform: "scale(" + (1 + f.value * c.scale) + ")"
        };
      },
      value: function(t, c){
        return {
          transform: anikit.util.s(1 + t * c.scale)
        };
      }
    }
  },
  edit: {
    dur: {
      'default': 1
    },
    scale: {
      'default': 0.3,
      type: 'number',
      min: 0,
      max: 100,
      step: 0.01
    },
    peak2: {
      'default': 0.5,
      type: 'number',
      min: 0,
      max: 1,
      step: 0.01
    },
    decay: {
      'default': 2,
      type: 'number',
      min: 0.1,
      max: 10,
      step: 0.01
    },
    span: {
      'default': 0.3,
      type: 'number',
      min: 0.1,
      max: 1,
      step: 0.01
    },
    len: {
      'default': 0.5,
      type: 'number',
      min: 0.1,
      max: 1,
      step: 0.01
    }
  },
  timing: function(t, opt){
    if (t < opt.span) {
      t = (opt.span - t) / opt.span;
      t = Math.pow(t, opt.decay);
    } else {
      t = (1 - t) / (1 - opt.span);
      t = Math.pow(t, opt.decay) * opt.peak2;
    }
    return t;
  },
  css: function(opt){
    var ref$, ref1$, this$ = this;
    return easingFit.fitToKeyframes(function(it){
      return this$.timing(it, opt);
    }, (ref$ = (ref1$ = opt.local || {}, ref1$.config = opt, ref1$), ref$.name = opt.name, ref$.prop = opt.prop, ref$));
  },
  js: function(t, opt){
    return opt.prop({
      value: this.timing(t, opt)
    }, opt);
  },
  affine: function(t, opt){
    return opt.value(this.timing(t, opt), opt);
  }
  /* similar keyframes */
  /*
    @keyframes ld-heartbeat
      0%
        transform: scale(1.05)
      5%
        transform: scale(config.max)
      39%
        transform: scale(config.min)
      45%
        transform: scale(1 + (config.max - 1) * 0.5)
      60%
        transform: scale(1.05)
      100%
        transform: scale(1.00)
  */
};
module.exports = ret;