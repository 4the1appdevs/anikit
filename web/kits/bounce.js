// Generated by LiveScript 1.3.1
var ret;
ret = {
  name: 'bounce',
  preset: {
    bounce: {}
  },
  edit: {
    blur: {
      'default': 10,
      type: 'number',
      unit: 'px',
      min: 0,
      max: 100
    },
    unit: {
      'default': 'px',
      type: 'choice',
      values: ["px", "%", ""]
    },
    height: {
      'default': -40,
      type: 'number',
      min: -500,
      max: 500
    },
    offset: {
      'default': 50,
      type: 'number',
      min: -500,
      max: 500
    },
    rate: {
      'default': 13 / 18,
      type: 'number',
      min: 0,
      max: 1
    },
    deflate: {
      'default': 0.6,
      type: 'number',
      min: 0,
      max: 1
    }
  },
  step: function(t, opt){
    var args, y, s;
    opt == null && (opt = {});
    args = [opt.height, opt.offset, opt.rate, opt.deflate];
    if (t < args[2]) {
      t = t / args[2];
      y = args[0] * (0.25 - Math.pow(t - 0.5, 2)) * 4;
      s = 1;
    } else {
      t = (t - args[2]) / (1 - args[2]);
      s = args[3] + (1 - args[3]) * Math.pow(t - 0.5, 2) / 0.25;
      y = args[1] * (1 - s);
    }
    return [1, 0, 0, s, 0, y];
  },
  css: function(opt){
    var optAlt, ret1, ret2, ret, this$ = this;
    optAlt = JSON.parse(JSON.stringify(opt));
    optAlt.height = 1;
    ret1 = easingFit.fit(function(it){
      return this$.step(it, optAlt)[5];
    }, {
      end: opt.rate
    });
    ret2 = easingFit.fit(function(it){
      return this$.step(it, optAlt)[3];
    }, {
      start: opt.rate
    });
    ret1.pop();
    ret = ret1.concat(ret2);
    ret = easingFit.toKeyframes(ret, {
      format: 'css',
      propFunc: function(it, idx){
        var s, y;
        if (idx < ret1.length) {
          return {
            transform: "translate(0," + it.value * opt.height + "px) scaleY(1)"
          };
        } else {
          s = it.value;
          y = (opt.offset || 50) * (1 - s);
          return {
            transform: "translate(0," + y + "px) scaleY(" + it.value + ")"
          };
        }
      },
      name: opt.name
    });
    return ret;
  },
  js: function(t, opt){
    var mat;
    opt == null && (opt = {});
    opt = import$(import$({}, this.opt), opt);
    mat = this.step(t, opt);
    return {
      transform: "matrix(" + mat.join(',') + ")"
    };
  }
};
module.exports = ret;
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}