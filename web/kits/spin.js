// Generated by LiveScript 1.3.1
var ret;
ret = {
  name: 'spin',
  preset: {
    "coin-h": {
      steep: 0.4,
      cycle: 3600,
      dur: 2,
      local: {
        errorThreshold: 0.001,
        sampleCount: 20
      },
      prop: function(f, c){
        return {
          transform: "rotateY(" + f.value * c.cycle + "deg)"
        };
      },
      value: function(f, c){
        return {
          transform: anikit.util.ry(f * c.cycle * Math.PI / 180)
        };
      }
    },
    "coin-v": {
      steep: 0.4,
      cycle: 3600,
      dur: 2,
      local: {
        errorThreshold: 0.001,
        sampleCount: 20
      },
      prop: function(f, c){
        return {
          transform: "rotateX(" + f.value * c.cycle + "deg)"
        };
      },
      value: function(f, c){
        return {
          transform: anikit.util.rx(f * c.cycle * Math.PI / 180)
        };
      }
    },
    "cycle": {
      steep: 0.0,
      cycle: 360,
      local: {
        errorThreshold: 0.001,
        sampleCount: 20
      },
      prop: function(f, c){
        return {
          transform: "rotate(" + f.value * c.cycle + "deg)"
        };
      },
      value: function(f, c){
        return {
          transform: anikit.util.rz(f * c.cycle * Math.PI / 180)
        };
      }
    },
    "flip-h": {
      steep: 0.4,
      cycle: 360,
      flip: true,
      local: {
        errorThreshold: 0.001,
        sampleCount: 20
      },
      prop: function(f, c){
        return {
          transform: "rotateY(" + f.value * c.cycle + "deg)"
        };
      },
      value: function(f, c){
        return {
          transform: anikit.util.ry(f * c.cycle * Math.PI / 180)
        };
      }
    },
    "flip-v": {
      steep: 0.4,
      cycle: 360,
      flip: true,
      local: {
        errorThreshold: 0.001,
        sampleCount: 20
      },
      prop: function(f, c){
        return {
          transform: "rotateX(" + f.value * c.cycle + "deg)"
        };
      },
      value: function(f, c){
        return {
          transform: anikit.util.rx(f * c.cycle * Math.PI / 180)
        };
      }
    },
    "spin-fast": {
      steep: 0.4,
      cycle: 1800,
      local: {
        errorThreshold: 0.001,
        sampleCount: 20
      },
      prop: function(f, c){
        return {
          transform: "rotate(" + f.value * c.cycle + "deg)"
        };
      },
      value: function(f, c){
        return {
          transform: anikit.util.rz(f * c.cycle * Math.PI / 180)
        };
      }
    },
    spin: {
      steep: 0.4,
      cycle: 360,
      local: {
        errorThreshold: 0.001,
        sampleCount: 20
      },
      prop: function(f, c){
        return {
          transform: "rotate(" + f.value * c.cycle + "deg)"
        };
      },
      value: function(f, c){
        return {
          transform: anikit.util.rz(f * c.cycle * Math.PI / 180)
        };
      }
    }
  },
  edit: {
    steep: {
      'default': 0.4,
      type: 'number',
      min: 0,
      max: 1
    },
    cycle: {
      'default': 360,
      type: 'number',
      unit: 'deg',
      min: 0,
      max: 3600,
      step: 360
    },
    flip: {
      'default': false,
      type: 'boolean'
    },
    unit: {
      'default': 'px',
      type: 'choice',
      values: ["px", "%", ""]
    }
  },
  timing: function(t, opt){
    var p1, p2;
    p1 = [opt.steep, 0, 1, 1 - opt.steep];
    p2 = [0, opt.steep, 1 - opt.steep, 1];
    if (opt.flip) {
      p1 = p2;
    }
    if (t === 0 || t === 1) {
      return t;
    }
    if (t < 0.5) {
      t = cubic.Bezier.y(cubic.Bezier.t(t * 2, p1), p1);
      t = t * 0.5;
    } else {
      t = cubic.Bezier.y(cubic.Bezier.t((t - 0.5) * 2, p2), p2);
      t = t * 0.5 + 0.5;
    }
    return t;
  },
  css: function(opt){
    var ref$, ref1$, this$ = this;
    return easingFit.fitToKeyframes(function(it){
      return this$.timing(it, opt);
    }, (ref$ = (ref1$ = opt.local || {}, ref1$.config = opt, ref1$), ref$.name = opt.name, ref$.prop = opt.prop, ref$));
  },
  js: function(t, opt){
    return opt.prop({
      value: this.timing(t, opt)
    }, opt);
  },
  affine: function(t, opt){
    return opt.value(this.timing(t, opt), opt);
  }
  /* equivalent keyframes */
  /*
    spin(name, dur, rate, offset, func)
      .{name}
  animation: unquote(name) dur linear infinite
      @keyframes {name}
  0%
   timing-speed-up(rate)
   func(0)
  50%
   timing-speed-down(rate)
   func(offset * 0.5)
  100%
   func(offset)
  */
};
module.exports = ret;