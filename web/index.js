// Generated by LiveScript 1.3.1
var tomatoJs, tomatoCss, tomatoWebgl, x$, suite, select, k, ref$, v, opt;
tomatoJs = document.querySelector('.tomato.js');
tomatoCss = document.querySelector('.tomato.css');
tomatoWebgl = document.querySelector('.tomato.webgl');
x$ = $('input.slider');
x$.val(0);
x$.ionRangeSlider({
  min: -1.0,
  max: 1.0,
  step: 0.001,
  onChange: function(it){
    suite.animate.offset = it.from;
    if (suite.shader) {
      return suite.shader.uniforms.offset.value = it.from;
    }
  }
});
suite = {
  init: function(){
    /* CSS */
    this.style = document.createElement("style");
    document.head.appendChild(this.style);
    return this.style.setAttribute('type', 'text/css');
  },
  stop: function(){
    return this.animate.aniid = -1;
  },
  animate: function(func){
    var aniid, step, this$ = this;
    this.animate.aniid = aniid = Math.random();
    return requestAnimationFrame(step = function(t){
      t = t * 0.001;
      func(t);
      if (this$.animate.aniid === aniid) {
        return requestAnimationFrame(step);
      }
    });
  },
  use: function(arg$){
    var mod, config, t1, args, shader, this$ = this;
    mod = arg$.mod, config = arg$.config;
    config.name = 'kit';
    /* CSS */
    t1 = Date.now();
    this.style.textContent = "" + mod.css(config) + "\n.tomato.css {\n  animation: kit " + (config.dur || 1) + "s infinite;\n  transform-origin: 50% 50%;\n}";
    console.log(mod.css(config));
    console.log("CSS Generation elapsed: " + (Date.now() - t1) * 0.001);
    /* JS */
    this.animate(function(t){
      t = (t + (this$.animate.offset || 0)) / (config.dur || 1);
      return import$(tomatoJs.style, mod.js(t - Math.floor(t), config));
    });
    return;
    /* WEBGL */
    return;
    args = new Float32Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15].map(function(it){
      return opt.args[it] || 0;
    }));
    this.shader = shader = {
      render: function(renderer, program, t){
        var gl;
        gl = renderer.gl;
        gl.clearColor(0, 0, 0, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);
        return gl.drawArrays(gl.TRIANGLES, 0, 6);
      },
      uniforms: {
        offset: {
          type: '1f',
          value: 0.0
        },
        args: {
          type: 'Matrix4fv',
          value: args
        }
      },
      vertexShader: 'precision highp float;' + kit.glsl({
        name: 'kit'
      }) + 'attribute vec3 position;\nuniform float uTime;\nuniform float offset;\nuniform vec2 uResolution;\nvoid main() {\n  float t = uTime;\n  vec3 pos = vec3(vec2(position), 1.);\n  gl_Position = vec4(pos, 1.);\n}',
      fragmentShader: 'precision highp float;' + kit.glsl({
        name: 'kit'
      }) + 'uniform float uTime;\nuniform float offset;\nuniform mat4 args;\nuniform vec2 uResolution;\nvoid main() {\n  float len, alpha, p, t = uTime + offset;\n  mat4 opt = mat4(args);\n  vec3 pos, c1, c2;\n  vec2 uv;\n  c1 = vec3(.5625, .5625, 1.);\n  c2 = vec3(.8125, .5625, 1.);\n  uv = gl_FragCoord.xy / uResolution.xy;\n  pos = vec3(uv - vec2(.5, .5), 1.);\n\n  /* 0 ~ 1 = 0 ~ 40px */\n  //opt[0][0] = opt[0][0] / 40.;\n  //opt[0][1] = opt[0][1] / 40.;\n\n  pos.xy = (pos.xy * uResolution.xy / 40.0);\n  t = t - floor(t);\n  pos = kit(t, 0, opt) * pos;\n\n  len = length(pos.xy);\n  alpha = smoothstep(1.02,.98,len);\n  p = smoothstep(0.81, 0.79, len);\n  if(pos.y < 0.0) { p = 1.; }\n  if(pos.x < 0.0) { p = 1.; }\n  gl_FragColor = vec4(c2 * p + c1 * (1. - p), alpha);\n}'
    };
    if (this.renderer) {
      this.renderer.destroy();
    }
    this.renderer = new ShaderRenderer([shader], {
      root: tomatoWebgl
    });
    this.renderer.init();
    return this.renderer.animate();
  }
};
suite.init();
select = document.querySelector('#select');
select.addEventListener('change', function(){
  var name, ret;
  name = this.value;
  ret = anikit.use(name);
  return suite.use(ret);
});
for (k in ref$ = anikit.types) {
  v = ref$[k];
  opt = document.createElement("option");
  opt.setAttribute('value', k);
  opt.textContent = k;
  select.appendChild(opt);
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}