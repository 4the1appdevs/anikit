// Generated by LiveScript 1.3.1
var tomatoJs, tomatoCss, tomatoWebgl, tomatoThree, x$, threeInit, suite, select, k, ref$, v, opt;
tomatoJs = document.querySelector('.tomato.js');
tomatoCss = document.querySelector('.tomato.css');
tomatoWebgl = document.querySelector('.tomato.webgl');
tomatoThree = document.querySelector('.tomato.three');
x$ = $('input.slider');
x$.val(0);
x$.ionRangeSlider({
  min: -1.0,
  max: 1.0,
  step: 0.001,
  onChange: function(it){
    suite.animate.offset = it.from;
    if (suite.shader) {
      return suite.shader.uniforms.offset.value = it.from;
    }
  }
});
threeInit = function(root, w, h){
  var box, ref$, camera, scene, renderer, controls, animate;
  w == null && (w = window.innerWidth);
  h == null && (h = window.innerHeight);
  box = tomatoThree.parentNode.getBoundingClientRect();
  ref$ = [box.width, box.height], w = ref$[0], h = ref$[1];
  camera = new THREE.PerspectiveCamera(45, w / h, 1, 10000);
  scene = new THREE.Scene();
  renderer = new THREE.WebGLRenderer({
    antialias: true,
    alpha: true
  });
  renderer.setSize(w, h);
  renderer.setClearColor(0x0, 0);
  root.appendChild(renderer.domElement);
  controls = {};
  animate = function(renderFunc){
    var _animate;
    _animate = function(value){
      requestAnimationFrame(_animate);
      return renderFunc(value);
    };
    return _animate();
  };
  return {
    camera: camera,
    scene: scene,
    renderer: renderer,
    w: w,
    h: h,
    controls: controls
  };
};
suite = {
  init: function(){
    /* CSS */
    var ref$, renderer, scene, camera, geom, shape, d, mat, mesh, light;
    this.style = document.createElement("style");
    document.head.appendChild(this.style);
    this.style.setAttribute('type', 'text/css');
    import$(this, threeInit(tomatoThree));
    ref$ = [this.renderer, this.scene, this.camera], renderer = ref$[0], scene = ref$[1], camera = ref$[2];
    geom = new THREE.SphereGeometry(1, 20, 20);
    shape = new THREE.Shape();
    d = 1.1;
    shape.moveTo(d, 0);
    shape.bezierCurveTo(d, 1.3 * d, -d, 1.3 * d, -d, 0);
    shape.bezierCurveTo(-d, -1.3 * d, d, -1.3 * d, d, 0);
    geom = new THREE.ShapeGeometry(shape);
    this.mat = mat = new THREE.MeshStandardMaterial({
      color: 0xffffff,
      metalness: 0,
      roughness: 0.5
    });
    this.mat = mat = new THREE.ShaderMaterial({
      side: THREE.DoubleSide,
      vertexShader: 'varying vec2 vUv;\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n}',
      fragmentShader: 'varying vec2 vUv;\nvoid main() {\n  vec3 c1 = vec3(1., 1., 0.5);\n  vec3 c2 = vec3(0., 0., 1.);\n  vec2 v = vUv;\n  float len = 0.;\n  len = length(v - 0.);\n  len = smoothstep(0.88,0.89,len);\n  if(v.y + v.x < 0.0 || v.y - v.x < 0.0 ) { len = 0.; }\n\n  gl_FragColor = vec4(mix(c1, c2, len), 1.);\n}'
    });
    this.mesh = mesh = new THREE.Mesh(geom, mat);
    this.light = light = new THREE.HemisphereLight(0x0099ff, 0xff9900, 0.9);
    scene.add(light);
    mesh.matrixAutoUpdate = false;
    scene.add(mesh);
    camera.position.set(0, 0, 10);
    camera.lookAt(0, 0, 0);
    return renderer.render(scene, camera);
  },
  stop: function(){
    return this.animate.aniid = -1;
  },
  animate: function(func){
    var aniid, step, this$ = this;
    this.animate.aniid = aniid = Math.random();
    return requestAnimationFrame(step = function(t){
      t = t * 0.001;
      func(t);
      t = t + (this$.animate.offset || 0);
      this$.mesh.matrix.set.apply(this$.mesh.matrix, this$.kit.affine(t - Math.floor(t)).transform || [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
      this$.renderer.render(this$.scene, this$.camera);
      if (this$.animate.aniid === aniid) {
        return requestAnimationFrame(step);
      }
    });
  },
  use: function(name){
    var kit, t1, args, shader, this$ = this;
    this.kit = kit = new anikit(name, {
      name: 'kit'
    });
    /* CSS */
    t1 = Date.now();
    this.style.textContent = kit.css({
      name: 'kit'
    });
    kit.animate(tomatoCss);
    console.log("CSS Generation elapsed: " + (Date.now() - t1) * 0.001);
    console.log(kit.affine(0));
    /* JS */
    this.animate(function(t){
      t = (t + (this$.animate.offset || 0)) / (kit.config.dur || 1);
      return import$(tomatoJs.style, kit.js(t - Math.floor(t)));
    });
    /* WEBGL */
    return;
    args = new Float32Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15].map(function(it){
      return opt.args[it] || 0;
    }));
    this.shader = shader = {
      render: function(renderer, program, t){
        var gl;
        gl = renderer.gl;
        gl.clearColor(0, 0, 0, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);
        return gl.drawArrays(gl.TRIANGLES, 0, 6);
      },
      uniforms: {
        offset: {
          type: '1f',
          value: 0.0
        },
        args: {
          type: 'Matrix4fv',
          value: args
        }
      },
      vertexShader: 'precision highp float;' + kit.glsl({
        name: 'kit'
      }) + 'attribute vec3 position;\nuniform float uTime;\nuniform float offset;\nuniform vec2 uResolution;\nvoid main() {\n  float t = uTime;\n  vec3 pos = vec3(vec2(position), 1.);\n  gl_Position = vec4(pos, 1.);\n}',
      fragmentShader: 'precision highp float;' + kit.glsl({
        name: 'kit'
      }) + 'uniform float uTime;\nuniform float offset;\nuniform mat4 args;\nuniform vec2 uResolution;\nvoid main() {\n  float len, alpha, p, t = uTime + offset;\n  mat4 opt = mat4(args);\n  vec3 pos, c1, c2;\n  vec2 uv;\n  c1 = vec3(.5625, .5625, 1.);\n  c2 = vec3(.8125, .5625, 1.);\n  uv = gl_FragCoord.xy / uResolution.xy;\n  pos = vec3(uv - vec2(.5, .5), 1.);\n\n  /* 0 ~ 1 = 0 ~ 40px */\n  //opt[0][0] = opt[0][0] / 40.;\n  //opt[0][1] = opt[0][1] / 40.;\n\n  pos.xy = (pos.xy * uResolution.xy / 40.0);\n  t = t - floor(t);\n  pos = kit(t, 0, opt) * pos;\n\n  len = length(pos.xy);\n  alpha = smoothstep(1.02,.98,len);\n  p = smoothstep(0.81, 0.79, len);\n  if(pos.y < 0.0) { p = 1.; }\n  if(pos.x < 0.0) { p = 1.; }\n  gl_FragColor = vec4(c2 * p + c1 * (1. - p), alpha);\n}'
    };
    if (this.renderer) {
      this.renderer.destroy();
    }
    this.renderer = new ShaderRenderer([shader], {
      root: tomatoWebgl
    });
    this.renderer.init();
    return this.renderer.animate();
  }
};
suite.init();
select = document.querySelector('#select');
select.addEventListener('change', function(){
  return suite.use(this.value);
});
for (k in ref$ = anikit.types) {
  v = ref$[k];
  opt = document.createElement("option");
  opt.setAttribute('value', k);
  opt.textContent = k;
  select.appendChild(opt);
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}