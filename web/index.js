// Generated by LiveScript 1.3.1
var tomatoJs, tomatoCss, tomatoWebgl, x$, suite;
tomatoJs = document.querySelector('.tomato.js');
tomatoCss = document.querySelector('.tomato.css');
tomatoWebgl = document.querySelector('.tomato.webgl');
x$ = $('input.slider');
x$.val(0);
x$.ionRangeSlider({
  min: -0.5,
  max: 0.5,
  step: 0.001,
  onChange: function(it){
    suite.animate.offset = it.from;
    return suite.shader.uniforms.offset.value = it.from;
  }
});
suite = {
  init: function(){
    /* CSS */
    this.style = document.createElement("style");
    document.head.appendChild(this.style);
    return this.style.setAttribute('type', 'text/css');
  },
  stop: function(){
    return this.animate.aniid = -1;
  },
  animate: function(func){
    var aniid, step, this$ = this;
    this.animate.aniid = aniid = Math.random();
    return requestAnimationFrame(step = function(t){
      func(t * 0.001);
      if (this$.animate.aniid === aniid) {
        return requestAnimationFrame(step);
      }
    });
  },
  useKit: function(name){
    var kit, shader, this$ = this;
    kit = anikit(name);
    /* CSS */
    this.style.textContent = "" + kit.css({
      name: 'kit',
      height: -20
    }) + "\n.tomato.css {\n  animation: kit 1s infinite\n}";
    /* JS */
    this.animate(function(t){
      var mat;
      t = t + (this$.animate.offset || 0);
      mat = kit.js(t - Math.floor(t), {
        height: -20
      });
      return tomatoJs.style.transform = "matrix(" + mat.join(',') + ")";
    });
    /* WEBGL */
    this.shader = shader = {
      render: function(renderer, program, t){
        var gl;
        gl = renderer.gl;
        gl.clearColor(0, 0, 0, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);
        return gl.drawArrays(gl.TRIANGLES, 0, 6);
      },
      uniforms: {
        offset: {
          type: '1f',
          value: 0.0
        }
      },
      vertexShader: 'precision highp float;' + kit.glsl({
        name: 'kit'
      }) + 'attribute vec3 position;\nuniform float uTime;\nuniform float offset;\nuniform vec2 uResolution;\nvoid main() {\n  float t = uTime;\n  vec3 pos = vec3(vec2(position), 1.);\n  gl_Position = vec4(pos, 1.);\n}',
      fragmentShader: 'precision highp float;' + kit.glsl({
        name: 'kit'
      }) + 'uniform float uTime;\nuniform float offset;\nuniform vec2 uResolution;\nvoid main() {\n  float len, alpha, p, t = uTime + offset;\n  mat4 opt = mat4(0);\n  vec3 pos, c1, c2;\n  vec2 uv;\n  c1 = vec3(.5625, .5625, 1.);\n  c2 = vec3(.8125, .5625, 1.);\n  uv = gl_FragCoord.xy / uResolution.xy;\n  pos = vec3(uv - vec2(.5, .5), 1.);\n\n  /* 0 ~ 1 = 0 ~ 40px */\n  opt[0][0] = -20. / 40.;\n\n  pos.xy = (pos.xy * uResolution.xy / 40.0);\n  pos = kit(t, 0, opt) * pos;\n\n  len = length(pos.xy);\n  alpha = smoothstep(1.02,.98,len);\n  p = smoothstep(0.81, 0.79, len);\n  if(pos.y < 0.0) { p = 1.; }\n  if(pos.x < 0.0) { p = 1.; }\n  gl_FragColor = vec4(c2 * p + c1 * (1. - p), alpha);\n}'
    };
    if (this.renderer) {
      this.renderer.destroy();
    }
    this.renderer = new ShaderRenderer([shader], {
      root: tomatoWebgl
    });
    this.renderer.init();
    this.renderer.animate();
    return console.log(this.renderer.width, this.renderer.height);
  }
};
suite.init();
suite.useKit('spin');
suite.useKit('bounce');